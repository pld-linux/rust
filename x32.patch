--- rustc-1.25.0-src/src/vendor/parking_lot_core/src/thread_parker/linux.rs~	2018-03-25 17:53:26.000000000 +0200
+++ rustc-1.25.0-src/src/vendor/parking_lot_core/src/thread_parker/linux.rs	2018-04-01 10:17:03.297595480 +0200
@@ -68,7 +68,7 @@
             }
             let ts = libc::timespec {
                 tv_sec: diff.as_secs() as libc::time_t,
-                tv_nsec: diff.subsec_nanos() as libc::c_long,
+                tv_nsec: diff.subsec_nanos() as libc::c_longlong,
             };
             let r = libc::syscall(libc::SYS_futex, &self.futex, FUTEX_WAIT | FUTEX_PRIVATE, 1, &ts);
             debug_assert!(r == 0 || r == -1);
--- rustc-1.25.0-src/src/vendor/parking_lot/src/elision.rs~	2018-03-25 17:53:25.000000000 +0200
+++ rustc-1.25.0-src/src/vendor/parking_lot/src/elision.rs	2018-04-01 10:23:02.095389442 +0200
@@ -101,7 +101,7 @@
     fn elision_acquire(&self, current: usize, new: usize) -> Result<usize, usize> {
         unsafe {
             let prev: usize;
-            asm!("xacquire; lock; cmpxchgq $2, $1"
+            asm!("xacquire; lock; cmpxchg $2, $1"
                  : "={rax}" (prev), "+*m" (self)
                  : "r" (new), "{rax}" (current)
                  : "memory"
@@ -118,7 +118,7 @@
     fn elision_release(&self, current: usize, new: usize) -> Result<usize, usize> {
         unsafe {
             let prev: usize;
-            asm!("xrelease; lock; cmpxchgq $2, $1"
+            asm!("xrelease; lock; cmpxchg $2, $1"
                  : "={rax}" (prev), "+*m" (self)
                  : "r" (new), "{rax}" (current)
                  : "memory"
--- rustc-1.25.0-src/src/vendor/filetime/src/unix/mod.rs~	2018-03-25 17:53:25.000000000 +0200
+++ rustc-1.25.0-src/src/vendor/filetime/src/unix/mod.rs	2018-04-01 23:34:09.811654820 +0200
@@ -72,7 +72,7 @@
     fn to_timespec(ft: &FileTime) -> timespec {
         timespec {
             tv_sec: ft.seconds() as time_t,
-            tv_nsec: ft.nanoseconds() as c_long,
+            tv_nsec: ft.nanoseconds() as libc::c_longlong,
         }
     }
 }
--- rustc-1.25.0-src/src/vendor/time/src/sys.rs~	2018-03-25 17:53:24.000000000 +0200
+++ rustc-1.25.0-src/src/vendor/time/src/sys.rs	2018-04-01 23:40:21.243254373 +0200
@@ -491,13 +491,13 @@
                 let nanoseconds = other - Duration::seconds(seconds);
                 let nanoseconds = nanoseconds.num_nanoseconds().unwrap();
                 self.t.tv_sec += seconds as libc::time_t;
-                self.t.tv_nsec += nanoseconds as libc::c_long;
-                if self.t.tv_nsec >= ::NSEC_PER_SEC as libc::c_long {
-                    self.t.tv_nsec -= ::NSEC_PER_SEC as libc::c_long;
+                self.t.tv_nsec += nanoseconds as libc::c_longlong;
+                if self.t.tv_nsec >= ::NSEC_PER_SEC as libc::c_longlong {
+                    self.t.tv_nsec -= ::NSEC_PER_SEC as libc::c_longlong;
                     self.t.tv_sec += 1;
                 } else if self.t.tv_nsec < 0 {
                     self.t.tv_sec -= 1;
-                    self.t.tv_nsec += ::NSEC_PER_SEC as libc::c_long;
+                    self.t.tv_nsec += ::NSEC_PER_SEC as libc::c_longlong;
                 }
                 self
             }
